# import the appropriate libraries
from pandas import read_csv
from numpy import set_printoptions
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import VotingClassifier

def main():
  # Load the data
  filename = './data/exoplanets_2018.csv'
  names = ['DispositionScore','OrbitalPeriod_days','OrbitalPeriodUpperUnc_days','OrbitalPeriodLowerUnc_days','TransitEpoch_BKJD','TransitEpochUpperUnc_BKJD','TransitEpochLowerUnc_BKJD','ImpactParamete','ImpactParameterUpperUnc','ImpactParameterLowerUnc','TransitDuration_hrs','TransitDurationUpperUnc_hrs','TransitDurationLowerUnc_hrs','TransitDepth_ppm','TransitDepthUpperUnc_ppm','TransitDepthLowerUnc_ppm','PlanetaryRadius[Earthradii','PlanetaryRadiusUpperUnc_Earthradii','PlanetaryRadiusLowerUnc_Earthradii','EquilibriumTemperature[K','InsolationFlux[Earthflux','InsolationFluxUpperUnc_Earthflux','InsolationFluxLowerUnc_Earthflux','TransitSignal-to-Nois','TCEPlanetNumbe','StellarEffectiveTemperature_K','StellarEffectiveTemperatureUpperUnc_K','StellarEffectiveTemperatureLowerUnc_K','StellarSurfaceGravity_log10(cm/s**2)','StellarSurfaceGravityUpperUnc_log10(cm/s**2)','StellarSurfaceGravityLowerUnc_log10(cm/s**2)','StellarRadius[Solarradii','StellarRadiusUpperUnc_Solarradii','StellarRadiusLowerUnc_Solarradii','RA[decimaldegrees','Dec[decimaldegrees','Kepler-band_mag','ExoplanetCandidate']
  dataframe = read_csv(filename, names=names)

  # Extract X and Y
  array = dataframe.values

  X = array[:,0:37]
  Y = array[:,37]

  # Setup k-fold
  seed = 7
  kfold = KFold(n_splits=10, shuffle=True, random_state=seed)
 
  # Setup Logistic Regression + Cross validation
  model = LogisticRegression(solver='liblinear', C=100.0, max_iter=2000)

  # Setup Decision Tree Classifier + Cross validation
  model1 = DecisionTreeClassifier(criterion='gini', n_estimators=100)
  
  # Setup Random Forest Classifier + Cross validation
  model2 = RandomForestClassifier(criterion='gini', n_estimators=100)
  

  # Return the average cross valiation score for each model 
  # as an array storing the values in the following format:
  # [0.73, 0.78, 0.80]

  results = cross_val_score(model, X, Y, cv=kfold)
  results1 = cross_val_score(model1, X, Y, cv=kfold)
  results2 = cross_val_score(model2, X, Y, cv=kfold)

  print(results.mean())
  print(results1.mean())
  print(results2.mean())
  return []
